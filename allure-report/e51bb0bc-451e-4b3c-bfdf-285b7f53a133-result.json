{"name": "test_sc_submit_rem_me_not_set", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=106.0.5249.103)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00C4DF13+2219795]\n\tOrdinal0 [0x00BE2841+1779777]\n\tOrdinal0 [0x00AF423D+803389]\n\tOrdinal0 [0x00AE0021+720929]\n\tOrdinal0 [0x00ADEE74+716404]\n\tOrdinal0 [0x00ADDCF9+711929]\n\tOrdinal0 [0x00B5FBAF+1244079]\n\tOrdinal0 [0x00B3E7FC+1107964]\n\tOrdinal0 [0x00B4F192+1175954]\n\tOrdinal0 [0x00B3E616+1107478]\n\tOrdinal0 [0x00B17F89+950153]\n\tOrdinal0 [0x00B18F56+954198]\n\tGetHandleVerifier [0x00F42CB2+3040210]\n\tGetHandleVerifier [0x00F32BB4+2974420]\n\tGetHandleVerifier [0x00CE6A0A+565546]\n\tGetHandleVerifier [0x00CE5680+560544]\n\tOrdinal0 [0x00BE9A5C+1808988]\n\tOrdinal0 [0x00BEE3A8+1827752]\n\tOrdinal0 [0x00BEE495+1827989]\n\tOrdinal0 [0x00BF80A4+1867940]\n\tBaseThreadInitThunk [0x7650FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x772F7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x772F7A6E+238]", "trace": "@pytest.fixture(scope='function')\n    def driver():\n        print(os.environ['PATH'])\n    \n>       return init_driver()\n\nconftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:18: in init_driver\n    driver.maximize_window()\n..\\diplom_wolk\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:596: in maximize_window\n    self.execute(command, None)\n..\\diplom_wolk\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F4147D3520>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772F7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772F7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=106.0.5249.103)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00C4DF13+2219795]\nE       \tOrdinal0 [0x00BE2841+1779777]\nE       \tOrdinal0 [0x00AF423D+803389]\nE       \tOrdinal0 [0x00AE0021+720929]\nE       \tOrdinal0 [0x00ADEE74+716404]\nE       \tOrdinal0 [0x00ADDCF9+711929]\nE       \tOrdinal0 [0x00B5FBAF+1244079]\nE       \tOrdinal0 [0x00B3E7FC+1107964]\nE       \tOrdinal0 [0x00B4F192+1175954]\nE       \tOrdinal0 [0x00B3E616+1107478]\nE       \tOrdinal0 [0x00B17F89+950153]\nE       \tOrdinal0 [0x00B18F56+954198]\nE       \tGetHandleVerifier [0x00F42CB2+3040210]\nE       \tGetHandleVerifier [0x00F32BB4+2974420]\nE       \tGetHandleVerifier [0x00CE6A0A+565546]\nE       \tGetHandleVerifier [0x00CE5680+560544]\nE       \tOrdinal0 [0x00BE9A5C+1808988]\nE       \tOrdinal0 [0x00BEE3A8+1827752]\nE       \tOrdinal0 [0x00BEE495+1827989]\nE       \tOrdinal0 [0x00BF80A4+1867940]\nE       \tBaseThreadInitThunk [0x7650FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x772F7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x772F7A6E+238]\n\n..\\diplom_wolk\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: WebDriverException"}, "attachments": [{"name": "stdout", "source": "58ae6713-61dc-42e6-b158-51c570d7ebc1-attachment.txt", "type": "text/plain"}], "start": 1665592607342, "stop": 1665592607342, "uuid": "f920e5cb-9de9-4a2e-9f2b-e2b8a9750f1b", "historyId": "2d6e712727eb7ce23d08d96cc7c3519d", "testCaseId": "afbbdfef0d117886f6034e27d2d8771b", "fullName": "pom.tests.login_page_test#test_sc_submit_rem_me_not_set", "labels": [{"name": "parentSuite", "value": "pom.tests"}, {"name": "suite", "value": "login_page_test"}, {"name": "host", "value": "DESKTOP-Q40JNMB"}, {"name": "thread", "value": "7412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pom.tests.login_page_test"}]}